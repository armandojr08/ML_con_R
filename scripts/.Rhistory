View(Revo.version)
rm(list = ls())
setwd("C:/Users/Administrador/Desktop/ARMANDO/EDUCATE CONSULTORES/MACHINE LEARNING CON R")
#### Configuraciones iniciales ####
rm(list = ls())
rm(list = ls())
# Resumen de datos categoricos univariados
# Simularemos algunos datos categoricos, en R
# se les conoce como datos de tipo vector
gender <- c(rep('boy',18), rep('girl',12))
gender
# Resumen de datos categoricos univariados
# Simularemos algunos datos categoricos, en R
# se les conoce como datos de tipo vector
gender <- c(rep('boy',10), rep('girl',12))
drink <- c(rep('coke',5), rep('sprite',3),
rep('coffee',6), rep('tea',3),
rep('water',1))
age <- sample(c('young', 'old'), size = length(gender), replace = T)
age
# Chocolateo de los elementos
n <- length(gender)
gender <- gender[sample(1:n,n),]
# Chocolateo de los elementos
n <- length(gender)
gender <- gender[sample(1:n,n),]
gender <- gender[sample(1:n,n)]
gender
drink <- drink[sample(1:n,n)]
age <- age[sample(1:n,n)]
age
drink
gender
# Contar las frecuencias de cada nivel de las
# variables anteriores
table(gender)
table(drink)
table(age)
# Cálculo de proporciones
prop.table(gender)
# Cálculo de proporciones
prop.table(table(gender))
prop.table(table(drink))
prop.table(table(age))
install.packages("magnittr")
install.packages("magrittr")
# Resumen de datos categoricos bivariados
library(magrittr)
library(help = "magrittr")
cbind(gender, drink)
cbind(gender, drink) %>% head
table1 <- table(gender, drink)
table1
# Resumen de datos multivariado
table2 <- table(gender, drink, age)
table2
table2
# Existe una forma más legible
table2_2 <- ftable(gender, drink, age)
table2_2
## Datos continuos
# Generación de un vector con elementos
# pseudo-aleatorios
x <- c(rexp(20), runif(50), rnorm(50,9,6.5), rweibull(20,5))
x
# chocolatear los elementos de x
x <- x[sample(1:length(x), length(x))]
x
plot(x)
m1 <- mean(x)
m2 <- median(x)
desEst <- sd(x)
rango.iqr <- IQR(x)
rango.iqr
mad(x)
## Para datos categóricos
barplot(table(age))
## Para datos categóricos
barplot(table(age))
# grafico bivariado
plot(table1, main = 'grafico bivariado')
plot(table2, main = 'grafico bivariado 2')
sample1 <- rexp(10)
sample1
stripchart(x = sample1)
plot(sample1)
plot(density(sample1))
plot(sample1)
plot(density(sample1))
plot(sample1)
plot(density(sample1))
plot(sample1)
hist(x)
hist(sample1)
sample1 <- rexp(100)
# qué tan concentrado estan los datos
stripchart(x = sample1)
hist(sample1)
sample1 <- rnorm(100)
# qué tan concentrado estan los datos
stripchart(x = sample1)
hist(sample1)
hist(sample1, freq = T, main = 'frecuencias')
hist(sample1, freq = F, main = 'frecuencias')
h1 <- hist(sample1)
View(h1)
h1$breaks
h1$counts
h1$density
# coloquemos la curva de densidad sobre
# nuestro histograma
hist(sample1, freq = F, main = 'frecuencias_1')
lines(density(sample1))
rug(sample1)
sum(h1$density)
cumsum(h1$density)
# coloquemos la curva de densidad sobre
# nuestro histograma
hist(sample1, freq = F, main = 'densidad')
lines(density(sample1))
rug(sample1) # que tan junto estan los datos
# ejecutamos varias veces rnorm y veamos
# el comportamiento de su boxplot
for(num in 1:10){
x <- rnorm(100)
boxplot(x)
Sys.sleep(time = 0.2)
}
# ejecutamos varias veces rnorm y veamos
# el comportamiento de su boxplot
for(num in 1:20){
x <- rnorm(100)
boxplot(x)
Sys.sleep(time = 0.2)
}
x <- x[sample(1:length(x), length(x))]
# ejecutamos varias veces rnorm y veamos
# el comportamiento de su boxplot
for(num in 1:20){
#x <- rnorm(100)
x <- c(rexp(20), runif(80,0,20), rweibull(20,5))
x <- x[sample(1:length(x), length(x))]
boxplot(x)
Sys.sleep(time = 0.2)
}
# ejecutamos varias veces rnorm y veamos
# el comportamiento de su boxplot
for(num in 1:20){
#x <- rnorm(100)
x <- c(rexp(20), runif(80,0,20), rweibull(20,5))
x <- x[sample(1:length(x), length(x))]
boxplot(x)
Sys.sleep(time = 0.2)
}
# ejecutamos varias veces rnorm y veamos
# el comportamiento de su boxplot
for(num in 1:20){
#x <- rnorm(100)
x <- c(rexp(20), runif(80,0,20), rweibull(20,5))
x <- x[sample(1:length(x), length(x))]
boxplot(x)
Sys.sleep(time = 0.2)
}
# ejecutamos varias veces rnorm y veamos
# el comportamiento de su boxplot
for(num in 1:20){
#x <- rnorm(100)
x <- c(rexp(20), runif(80,0,20), rweibull(20,5))
x <- x[sample(1:length(x), length(x))]
boxplot(x)
Sys.sleep(time = 0.2)
}
rm(list = ls())
data0 <- read.csv("https://github.com/robintux/Datasets4StackOverFlowQuestions/blob/master/candy_production.csv
")
head(data)
head(data0)
data0 <- read.csv("https://github.com/robintux/Datasets4StackOverFlowQuestions/blob/master/candy_production.csv
")
head(data0)
View(data0)
data0 <- read.csv("https://raw.githubusercontent.com/robintux/Datasets4StackOverFlowQuestions/master/candy_production.csv")
data0 <- read.csv("https://raw.githubusercontent.com/robintux/Datasets4StackOverFlowQuestions/master/candy_production.csv")
View(data0)
colnames(data0) <- c("period", "candy_production")
colnames(dta0)
colnames(data0)
str(data0)
class(data0)
# convertimos el dataframe en un objeto TS
candyts <- ts(data0$candy_production,
start = c(1972,1),
end = c(2017,8),
frequency = 12)
candyts
str(candyts)
candyts
# verificando si hay valores perdidos
sum(is.na(candyts))
# verificando la frecuencia
frequency(candyts)
# ciclo
cycle(candyts)
# visualizacion de la data
plot.ts(candyts, ylab = 'produccion de caramelos', main = 'Produccion mensual de caramelos en USA')
# boxplot de la serie de tiempo en funcion de su ciclo
boxplot(candyts~cycle(candyts),
xlab = 'mensual',
ylab = 'produccion de caramelos',
main = 'produccion mensual de caramelos [1972-2017]')
# boxplot de la serie de tiempo en funcion de su ciclo
colores <- rep('lightblue',12)
colores3 <- 'yellow'
boxplot(candyts~cycle(candyts),
xlab = 'mensual',
ylab = 'produccion de caramelos',
main = 'produccion mensual de caramelos [1972-2017]',
col = colores)
# boxplot de la serie de tiempo en funcion de su ciclo
colores <- rep('lightblue',12)
colores3 <- 'yellow'
boxplot(candyts~cycle(candyts),
xlab = 'mensual',
ylab = 'produccion de caramelos',
main = 'produccion mensual de caramelos [1972-2017]',
col = colores)
colores[3] <- 'yellow'
boxplot(candyts~cycle(candyts),
xlab = 'mensual',
ylab = 'produccion de caramelos',
main = 'produccion mensual de caramelos [1972-2017]',
col = colores)
rm(list = ls())
rm(list = ls())
dev.off()
install.packages('quantmod')
# libreria de datos financieros
library(quantmod)
library(zoo)
install.packages('xts')
library(xts)
# conseguir datos de forex (tipo de cambio)
USOPEN <- getSymbols.oanda('USD/PEN', auto.assign = F)
USOPEN
# definamos una lista de empresas a estudiar y
# tambien un indicador
tickers <- c('AAPL','TSLA','IBM','CSCO','C','^GSPC')
# para la descarga vamos a usar la funcion getSymbols
getSymbols(Symbols = tickers)
View(AAPL)
View(GSPC)
rm(list = ls())
R.version
R.version.string
getwd()
## Configuración de rtools después de instalarlo
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
