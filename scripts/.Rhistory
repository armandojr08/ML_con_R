plot.ts(candyts, ylab = 'produccion de caramelos', main = 'Produccion mensual de caramelos en USA')
# boxplot de la serie de tiempo en funcion de su ciclo
boxplot(candyts~cycle(candyts),
xlab = 'mensual',
ylab = 'produccion de caramelos',
main = 'produccion mensual de caramelos [1972-2017]')
# boxplot de la serie de tiempo en funcion de su ciclo
colores <- rep('lightblue',12)
colores3 <- 'yellow'
boxplot(candyts~cycle(candyts),
xlab = 'mensual',
ylab = 'produccion de caramelos',
main = 'produccion mensual de caramelos [1972-2017]',
col = colores)
# boxplot de la serie de tiempo en funcion de su ciclo
colores <- rep('lightblue',12)
colores3 <- 'yellow'
boxplot(candyts~cycle(candyts),
xlab = 'mensual',
ylab = 'produccion de caramelos',
main = 'produccion mensual de caramelos [1972-2017]',
col = colores)
colores[3] <- 'yellow'
boxplot(candyts~cycle(candyts),
xlab = 'mensual',
ylab = 'produccion de caramelos',
main = 'produccion mensual de caramelos [1972-2017]',
col = colores)
rm(list = ls())
rm(list = ls())
dev.off()
install.packages('quantmod')
# libreria de datos financieros
library(quantmod)
library(zoo)
install.packages('xts')
library(xts)
# conseguir datos de forex (tipo de cambio)
USOPEN <- getSymbols.oanda('USD/PEN', auto.assign = F)
USOPEN
# definamos una lista de empresas a estudiar y
# tambien un indicador
tickers <- c('AAPL','TSLA','IBM','CSCO','C','^GSPC')
# para la descarga vamos a usar la funcion getSymbols
getSymbols(Symbols = tickers)
View(AAPL)
View(GSPC)
rm(list = ls())
R.version
R.version.string
getwd()
## Configuración de rtools después de instalarlo
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
x <- c(1,NA,3,NA,NA,5)
# 1era forma : usar las funciones any y is_na
baset0 <- Sys.time()
any(is.na(x))
t_base <- Sys.time() - baset0
t_base
# 2da forma : usando naniar
naniert0 <- Sys.time()
naniar::any_na(x)
t_naniar <- Sys.time() - naniert0
t_naniar
# 3era forma
base2t0 <- Sys.time()
anyNA(x)
t_base2 <- Sys.time() - base2t0
t_base2
# Buscar un vector booleano que testee si un elemento es NA
are_na(x)
library(naniar)
library(simputation)
library(dplyr)
library(tidyverse)
library(gridExtra)
x <- c(1,NA,3,NA,NA,5)
# 1era forma : usar las funciones any y is_na
baset0 <- Sys.time()
any(is.na(x))
t_base <- Sys.time() - baset0
t_base
# 2da forma : usando naniar
naniert0 <- Sys.time()
naniar::any_na(x)
t_naniar <- Sys.time() - naniert0
t_naniar
# 3era forma
base2t0 <- Sys.time()
anyNA(x)
t_base2 <- Sys.time() - base2t0
t_base2
# Buscar un vector booleano que testee si un elemento es NA
are_na(x)
# cantidad de NA en un vector de datos
n_miss(x)
# proporción de NA en un vector de datos
prop_miss(x)
# Operaciones aritméticas en vectores que contienen NA
sum(x)
sum(x, na.rm = T)
mean(x, na.rm = T)
which(is.na(x)) # posiciones que ocupan los NA
# Valores extraños : NA, NaN, Inf
c(1,0)/0
# Operaciones con NA desde una operación lógica
NA | TRUE
NA | FALSE
NA | NA
NaN | NA
# Crear otro vector
x <- c(NA, NaN, Inf, '.', 'missing')
any_na(x)
are_na(x)
data_hw_url <- "https://raw.githubusercontent.com/robintux/Datasets4StackOverFlowQuestions/master/dat_hw.csv"
data_hw <- read.csv(data_hw_url)
colnames(data_hw)
dim(data_hw)
# eliminar la columna x (índices)
data_hw <- data_hw[,-1] # data_hw %>% select(-x)
# Cantidad de valores perdidos
n_miss(data_hw)
n_miss(data_hw$weight); n_miss(data_hw$height)
# Función n_complete : cuenta el número de valores no perdidos
n_complete(data_hw)
n_complete(data_hw$weight); n_complete(data_hw$height)
# Proporción de valores perdidos
prop_miss(data_hw)
prop_miss(data_hw$weight)
# Proporción de valores no faltantes
prop_complete(data_hw)
prop_complete(data_hw$height)
# Resumen estadístico básico del dataframe
summary(data_hw)
# Resumen de datos faltantes por columna
miss_col <- miss_var_summary(data_hw)
glimpse(miss_col)
# Trabajando con el dataframe airquality
miss_col_air <- miss_var_summary(airquality)
glimpse(miss_col_air)
# Información de valores perdidos por fila o caso
miss_case_summary(data_hw)    # case (fila)
miss_case_summary(airquality) # en la fila 27 hay 2 NA
miss_var_table(data_hw)    # En 2 variables faltan 15 observaciones
miss_var_table(airquality) # En 4 variables hay 0 NA
miss_case_table(data_hw)   # 70 filas tienen 0 NA
miss_case_table(airquality)# Hay 11 filas que no contienen NA
# Visualización de datos faltantes
vis_miss(airquality)
vis_miss(airquality[,c(1,2,3)])
vis_miss(data_hw)
# Reporte de valores faltantes en ambas dimensiones
varp <- gg_miss_var(airquality)
casep <- gg_miss_case(airquality)
grid.arrange(varp, casep, ncol = 2)
# Si agrupamos  nuestros datos faltantes por intermedio
# de la variable month
varp_month <- gg_miss_var(airquality, facet = Month)
gg_miss_upset(data_hw)
# ---------------------------------------------------------
#
gg_miss_upset(data_hw)
gg_miss_upset(airquality)
gg_miss_fct(x = airquality, fct = Month)
library(naniar)
library(simputation)
library(dplyr)
library(tidyverse)
library(gridExtra)
x <- c(1,NA,3,NA,NA,5)
# 1era forma : usar las funciones any y is_na
baset0 <- Sys.time()
any(is.na(x))
t_base <- Sys.time() - baset0
t_base
# 2da forma : usando naniar
naniert0 <- Sys.time()
naniar::any_na(x)
t_naniar <- Sys.time() - naniert0
t_naniar
# 3era forma
base2t0 <- Sys.time()
anyNA(x)
t_base2 <- Sys.time() - base2t0
t_base2
# Buscar un vector booleano que testee si un elemento es NA
are_na(x)
# cantidad de NA en un vector de datos
n_miss(x)
# proporción de NA en un vector de datos
prop_miss(x)
# Operaciones aritméticas en vectores que contienen NA
sum(x)
sum(x, na.rm = T)
mean(x, na.rm = T)
which(is.na(x)) # posiciones que ocupan los NA
# Valores extraños : NA, NaN, Inf
c(1,0)/0
# Operaciones con NA desde una operación lógica
NA | TRUE
NA | FALSE
NA | NA
NaN | NA
# Crear otro vector
x <- c(NA, NaN, Inf, '.', 'missing')
any_na(x)
are_na(x)
data_hw_url <- "https://raw.githubusercontent.com/robintux/Datasets4StackOverFlowQuestions/master/dat_hw.csv"
data_hw <- read.csv(data_hw_url)
colnames(data_hw)
dim(data_hw)
# eliminar la columna x (índices)
data_hw <- data_hw[,-1] # data_hw %>% select(-x)
# Cantidad de valores perdidos
n_miss(data_hw)
n_miss(data_hw$weight); n_miss(data_hw$height)
# Función n_complete : cuenta el número de valores no perdidos
n_complete(data_hw)
n_complete(data_hw$weight); n_complete(data_hw$height)
# Proporción de valores perdidos
prop_miss(data_hw)
prop_miss(data_hw$weight)
# Proporción de valores no faltantes
prop_complete(data_hw)
prop_complete(data_hw$height)
# Resumen estadístico básico del dataframe
summary(data_hw)
# Resumen de datos faltantes por columna
miss_col <- miss_var_summary(data_hw)
glimpse(miss_col)
# Trabajando con el dataframe airquality
miss_col_air <- miss_var_summary(airquality)
glimpse(miss_col_air)
# Información de valores perdidos por fila o caso
miss_case_summary(data_hw)    # case (fila)
miss_case_summary(airquality) # en la fila 27 hay 2 NA
miss_var_table(data_hw)    # En 2 variables faltan 15 observaciones
miss_var_table(airquality) # En 4 variables hay 0 NA
miss_case_table(data_hw)   # 70 filas tienen 0 NA
miss_case_table(airquality)# Hay 11 filas que no contienen NA
# Visualización de datos faltantes
vis_miss(airquality)
vis_miss(airquality[,c(1,2,3)])
vis_miss(data_hw)
# Reporte de valores faltantes en ambas dimensiones
varp <- gg_miss_var(airquality)
casep <- gg_miss_case(airquality)
grid.arrange(varp, casep, ncol = 2)
# Si agrupamos  nuestros datos faltantes por intermedio
# de la variable month
varp_month <- gg_miss_var(airquality, facet = Month)
# Si agrupamos  nuestros datos faltantes por intermedio
# de la variable month
varp_month <- gg_miss_var(airquality, facet = Month)
varp_month
# Algunas funciones importantes
gg_miss_upset(data_hw)
x
# Algunas funciones importantes
v1 <- c(1,2,NA,5,NA,12,10,NA,9)
v2 <- c(11,23,NA,11,12,111,23,NA,0)
# Algunas funciones importantes
v1 <- c(1,2,NA,5,NA,12,10,NA,9)
v2 <- c(11,23,NA,11,12,111,23,NA,0)
length(v1)
length(v2)
v3 <- c(78,12,NA,12,16,124,2,12,1,9)
length(v3)
# Algunas funciones importantes
v1 <- c(1,2,NA,5,NA,12,10,NA,9)
v2 <- c(11,23,NA,11,12,111,23,NA,0)
v3 <- c(78,12,NA,12,16,124,2,12,1,9)
df1 <- data.frame(v1,v2,v3)
df1 <- data.frame(v1,v2,v3)
# Algunas funciones importantes
v1 <- c(1,2,NA,5,NA,12,10,NA,9)
v2 <- c(11,23,NA,11,12,111,23,NA,0)
v3 <- c(78,12,NA,12,16,124,2,12,1,9)
df1 <- data.frame(v1,v2,v3)
length(v1)
# Algunas funciones importantes
v1 <- c(1,2,NA,5,NA,12,10,NA,9,10)
v2 <- c(11,23,NA,11,12,111,23,NA,0)
v3 <- c(78,12,NA,12,16,124,2,12,1,9)
df1 <- data.frame(v1,v2,v3)
length(v1)
length(v2)
v2 <- c(11,23,NA,11,12,111,23,NA,0,10)
v3 <- c(78,12,NA,12,16,124,2,12,1,9)
df1 <- data.frame(v1,v2,v3)
df1
gg_miss_upset(df1)
View(data_hw)
df1 <- data.frame(v1,v2,v3)
# Algunas funciones importantes
v1 <- c(1,2,NA,5,NA,12,10,NA,9,10,NA)
v2 <- c(11,23,NA,11,12,111,23,NA,0,10,NA)
v3 <- c(78,12,NA,12,16,124,2,12,1,9,NA)
df1 <- data.frame(v1,v2,v3)
gg_miss_upset(df1)
# Algunas funciones importantes
v1 <- c(1,2,NA,5,NA,12,10,NA,9,NA,NA,NA)
v2 <- c(11,23,NA,11,12,111,23,NA,0,10,NA)
v3 <- c(78,12,NA,12,16,124,2,12,1,9,NA)
df1 <- data.frame(v1,v2,v3)
# Algunas funciones importantes
v1 <- c(1,2,NA,5,NA,12,10,NA,9,NA,NA,NA)
v2 <- c(11,23,NA,11,12,111,23,NA,0,10,NA)
v3 <- c(78,12,NA,12,16,124,2,12,1,9,NA)
df1 <- data.frame(v1,v2,v3)
length(v1)
length(v2)
# Algunas funciones importantes
v1 <- c(1,2,NA,5,NA,12,10,NA,9,NA,NA)
v2 <- c(11,23,NA,11,12,111,23,NA,0,10,NA)
v3 <- c(78,12,NA,12,16,124,2,12,1,9,NA)
df1 <- data.frame(v1,v2,v3)
length(v2)
gg_miss_upset(df1)
# Algunas funciones importantes
v1 <- c(2,NA,5,NA,12,10,NA,9,NA,NA)
v2 <- c(23,NA,11,12,111,23,NA,0,10,NA)
v3 <- c(12,NA,12,16,124,2,12,1,9,NA)
df1 <- data.frame(v1,v2,v3)
length(v2)
gg_miss_upset(airquality)
v4 <- seq(1,10,1)
v4
df1 <- data.frame(v1,v2,v3,v4)
length(v2)
gg_miss_upset(df1)
df1
gg_miss_upset(df1)
# Algunas funciones importantes
v1 <- c(2,NA,5,NA,12,10,NA,9,NA,NA)
v2 <- c(23,NA,11,12,111,23,NA,0,10,NA)
v3 <- c(12,NA,12,16,124,2,12,1,9,NA)
v4 <- seq(1,10,1)
df1 <- data.frame(v1,v2,v3,v4)
length(v2)
gg_miss_upset(df1)
v4 <- c(seq(1,19,1),NA)
df1 <- data.frame(v1,v2,v3,v4)
length(v2)
gg_miss_upset(df1)
prop_miss(df1)
prop_miss(df1$v1)
df1 <- data.frame(v1,v2,v3,v4)
gg_miss_upset(df1)
df1
# Algunas funciones importantes
v1 <- c(2,NA,5,NA,12,10,NA,9,NA,NA)
v2 <- c(23,NA,11,12,111,23,NA,0,10,NA)
v3 <- c(12,NA,12,16,124,2,12,1,9,NA)
v4 <- c(seq(1,99,1),NA)
df1 <- data.frame(v1,v2,v3,v4)
df1
gg_miss_upset(df1)
v4 <- c(seq(1,9,1),NA)
df1 <- data.frame(v1,v2,v3,v4)
df1
gg_miss_upset(df1)
# Algunas funciones importantes
v1 <- c(2,NA,5,12,NA,10,NA,9,NA,NA)
v2 <- c(23,NA,11,12,111,23,NA,0,10,NA)
v3 <- c(12,NA,12,16,124,2,12,1,9,NA)
v4 <- c(seq(1,9,1),NA)
df1 <- data.frame(v1,v2,v3,v4)
df1
gg_miss_upset(df1)
gg_miss_upset(data_hw)
gg_miss_upset(airquality)
prop_miss(airquality)
n_miss(airquality)
n_miss(airquality$Ozone)
n_miss(airquality$Solar.R)
n_miss(airquality$Wind)
gg_miss_upset(df1)
length(v1)
length(v3)
df1;dim(df1)
# mapa de calor
gg_miss_fct(x = airquality, fct = Month)
# mapa de calor
gg_miss_fct(df1)
# Analizando otro dataset
str(pedestrian)
# Analizando otro dataset
data("pedestrian")
View(pedestrian)
gg_miss_span(pedestrian)
names(pedestrian)
dim(pedestrian)
gg_miss_span(pedestrian, var = hourly_counts,span_every = 3000)
# Analizando dataset riskfactors
View(riskfactors)
str(riskfactors)
dim(riskfactors)
n_miss(riskfactors)
n_miss(riskfactors); prop_miss(riskfactors)
245*34
n_miss(riskfactors)*100/8330
class(riskfactors$sex)
levels(riskfactors)
levels(riskfactors$sex)
any(is.na(riskfactors$sex))
any(is.na(riskfactors$sex))
table(riskfactors$sex)
barplot(table(riskfactors$sex))
barplot(table(riskfactors$sex))
vis_miss(riskfactors)
vis_miss(riskfactors)
vis_miss(riskfactors)
naniar::vis_miss(riskfactors)
vis_miss(airquality)
?vis_miss
dev.off()
vis_miss(airquality)
vis_miss(riskfactors)
limpiaNA <- na.omit(riskfactors)
dim(limpiaNA)
print(i)
# Si decido que toda columna con un porcentaje de NA
# por encima de 20 % se elimine
for (i in c(1,2,3)) {
print(i)
}
# Si decido que toda columna con un porcentaje de NA
# por encima de 20 % se elimine
for (i in c(0,2,3)) {
print(i)
}
dim(riskfactors)[1]
dim(riskfactors)[2]
print(i)
# Si decido que toda columna con un porcentaje de NA
# por encima de 20 % se elimine
for (i in 1:dim(riskfactors)[2]) {
print(i)
}
# Si decido que toda columna con un porcentaje de NA
# por encima de 20 % se elimine
for (i in 1:dim(riskfactors)[2]) {
if (prop_miss(riskfactors[,i] > 0.2)) {
print(i)
}
}
prop_miss(riskfactors[,2])
prop_miss(riskfactors[,4])
for (i in 1:dim(riskfactors)[2]) {
if (prop_miss(riskfactors[,i] > 0.2)) {
print(i)
}
}
prop_miss(riskfactors[,1] > 0.2
# Si decido que toda columna con un porcentaje de NA
# por encima de 20 % se elimine
for (i in 1:dim(riskfactors)[2]) {
if (prop_miss(riskfactors[,1]) > 0.2) {
print(i)
}
}
if (prop_miss(riskfactors[,i]) > 0.2) {
print(i)
}
# Si decido que toda columna con un porcentaje de NA
# por encima de 20 % se elimine
for (i in 1:dim(riskfactors)[2]) {
if (prop_miss(riskfactors[,i]) > 0.2) {
print(i)
}
}
# Si decido que toda columna con un porcentaje de NA
# por encima de 20 % se elimine
x <- as.vector()
# Si decido que toda columna con un porcentaje de NA
# por encima de 20 % se elimine
x <- as.vector()
# Si decido que toda columna con un porcentaje de NA
# por encima de 20 % se elimine
x <- as.vector()
# Si decido que toda columna con un porcentaje de NA
# por encima de 20 % se elimine
x <- vector()
x
for (i in 1:dim(riskfactors)[2]) {
if (prop_miss(riskfactors[,i]) > 0.2) {
x <- c(x,i)
}
}
# Si decido que toda columna con un porcentaje de NA
# por encima de 20 % se elimine
x <- vector()
for (i in 1:dim(riskfactors)[2]) {
if (prop_miss(riskfactors[,i]) > 0.2) {
x <- c(x,i)
}
}
x# ---------------------------------------------------------
x
rf2 <- riskfactors[,-x]
dim(rf2)
vis_miss(rf2)
# Si decido que toda columna con un porcentaje de NA
# por encima de 20 % se elimine
colSums(is.na(riskfactors))
rowSums(is.na(riskfactors))
NAs_rf <- riskfactors %>% map_df(function(x) sum(is.na(x))) %>%
gather(variable, Num_NAs)
NAs_rf
NAs_rf$porc_NA <- NAs_rf$Num_NAs*100/nrow((riskfactors))
NAs_rf
